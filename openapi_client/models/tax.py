# coding: utf-8

"""
    SBC Pay API Reference

    BC Registries Pay API reference documentation  # noqa: E501

    The version of the OpenAPI document: 1.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class Tax(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'gst': 'float',
        'pst': 'float'
    }

    attribute_map = {
        'gst': 'gst',
        'pst': 'pst'
    }

    def __init__(self, gst=None, pst=None, local_vars_configuration=None):  # noqa: E501
        """Tax - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._gst = None
        self._pst = None
        self.discriminator = None

        if gst is not None:
            self.gst = gst
        if pst is not None:
            self.pst = pst

    @property
    def gst(self):
        """Gets the gst of this Tax.  # noqa: E501

        Good Services Tax  # noqa: E501

        :return: The gst of this Tax.  # noqa: E501
        :rtype: float
        """
        return self._gst

    @gst.setter
    def gst(self, gst):
        """Sets the gst of this Tax.

        Good Services Tax  # noqa: E501

        :param gst: The gst of this Tax.  # noqa: E501
        :type gst: float
        """

        self._gst = gst

    @property
    def pst(self):
        """Gets the pst of this Tax.  # noqa: E501

        Provincial Sales Tax  # noqa: E501

        :return: The pst of this Tax.  # noqa: E501
        :rtype: float
        """
        return self._pst

    @pst.setter
    def pst(self, pst):
        """Sets the pst of this Tax.

        Provincial Sales Tax  # noqa: E501

        :param pst: The pst of this Tax.  # noqa: E501
        :type pst: float
        """

        self._pst = pst

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Tax):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Tax):
            return True

        return self.to_dict() != other.to_dict()
