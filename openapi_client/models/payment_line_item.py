# coding: utf-8

"""
    SBC Pay API Reference

    BC Registries Pay API reference documentation  # noqa: E501

    The version of the OpenAPI document: 1.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class PaymentLineItem(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'invoice_id': 'int',
        'fee_schedule_id': 'int',
        'quantity': 'int',
        'filing_fees': 'float',
        'service_fees': 'float',
        'processing_fees': 'float',
        'description': 'float',
        'gst': 'float',
        'pst': 'float',
        'status_code': 'str'
    }

    attribute_map = {
        'id': 'id',
        'invoice_id': 'invoiceId',
        'fee_schedule_id': 'feeScheduleId',
        'quantity': 'quantity',
        'filing_fees': 'filingFees',
        'service_fees': 'serviceFees',
        'processing_fees': 'processingFees',
        'description': 'description',
        'gst': 'gst',
        'pst': 'pst',
        'status_code': 'statusCode'
    }

    def __init__(self, id=None, invoice_id=None, fee_schedule_id=None, quantity=None, filing_fees=None, service_fees=None, processing_fees=None, description=None, gst=None, pst=None, status_code=None, local_vars_configuration=None):  # noqa: E501
        """PaymentLineItem - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._invoice_id = None
        self._fee_schedule_id = None
        self._quantity = None
        self._filing_fees = None
        self._service_fees = None
        self._processing_fees = None
        self._description = None
        self._gst = None
        self._pst = None
        self._status_code = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if invoice_id is not None:
            self.invoice_id = invoice_id
        if fee_schedule_id is not None:
            self.fee_schedule_id = fee_schedule_id
        if quantity is not None:
            self.quantity = quantity
        if filing_fees is not None:
            self.filing_fees = filing_fees
        if service_fees is not None:
            self.service_fees = service_fees
        if processing_fees is not None:
            self.processing_fees = processing_fees
        if description is not None:
            self.description = description
        if gst is not None:
            self.gst = gst
        if pst is not None:
            self.pst = pst
        if status_code is not None:
            self.status_code = status_code

    @property
    def id(self):
        """Gets the id of this PaymentLineItem.  # noqa: E501

        Unique identifier for payment line item  # noqa: E501

        :return: The id of this PaymentLineItem.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PaymentLineItem.

        Unique identifier for payment line item  # noqa: E501

        :param id: The id of this PaymentLineItem.  # noqa: E501
        :type id: int
        """

        self._id = id

    @property
    def invoice_id(self):
        """Gets the invoice_id of this PaymentLineItem.  # noqa: E501

        Unique identifier for invoice  # noqa: E501

        :return: The invoice_id of this PaymentLineItem.  # noqa: E501
        :rtype: int
        """
        return self._invoice_id

    @invoice_id.setter
    def invoice_id(self, invoice_id):
        """Sets the invoice_id of this PaymentLineItem.

        Unique identifier for invoice  # noqa: E501

        :param invoice_id: The invoice_id of this PaymentLineItem.  # noqa: E501
        :type invoice_id: int
        """

        self._invoice_id = invoice_id

    @property
    def fee_schedule_id(self):
        """Gets the fee_schedule_id of this PaymentLineItem.  # noqa: E501

        Fee schedule id  # noqa: E501

        :return: The fee_schedule_id of this PaymentLineItem.  # noqa: E501
        :rtype: int
        """
        return self._fee_schedule_id

    @fee_schedule_id.setter
    def fee_schedule_id(self, fee_schedule_id):
        """Sets the fee_schedule_id of this PaymentLineItem.

        Fee schedule id  # noqa: E501

        :param fee_schedule_id: The fee_schedule_id of this PaymentLineItem.  # noqa: E501
        :type fee_schedule_id: int
        """

        self._fee_schedule_id = fee_schedule_id

    @property
    def quantity(self):
        """Gets the quantity of this PaymentLineItem.  # noqa: E501

        Quantity of fee  # noqa: E501

        :return: The quantity of this PaymentLineItem.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this PaymentLineItem.

        Quantity of fee  # noqa: E501

        :param quantity: The quantity of this PaymentLineItem.  # noqa: E501
        :type quantity: int
        """

        self._quantity = quantity

    @property
    def filing_fees(self):
        """Gets the filing_fees of this PaymentLineItem.  # noqa: E501

        Fees for filing  # noqa: E501

        :return: The filing_fees of this PaymentLineItem.  # noqa: E501
        :rtype: float
        """
        return self._filing_fees

    @filing_fees.setter
    def filing_fees(self, filing_fees):
        """Sets the filing_fees of this PaymentLineItem.

        Fees for filing  # noqa: E501

        :param filing_fees: The filing_fees of this PaymentLineItem.  # noqa: E501
        :type filing_fees: float
        """

        self._filing_fees = filing_fees

    @property
    def service_fees(self):
        """Gets the service_fees of this PaymentLineItem.  # noqa: E501

        Applicable service fees  # noqa: E501

        :return: The service_fees of this PaymentLineItem.  # noqa: E501
        :rtype: float
        """
        return self._service_fees

    @service_fees.setter
    def service_fees(self, service_fees):
        """Sets the service_fees of this PaymentLineItem.

        Applicable service fees  # noqa: E501

        :param service_fees: The service_fees of this PaymentLineItem.  # noqa: E501
        :type service_fees: float
        """

        self._service_fees = service_fees

    @property
    def processing_fees(self):
        """Gets the processing_fees of this PaymentLineItem.  # noqa: E501

        Applicable processing fees  # noqa: E501

        :return: The processing_fees of this PaymentLineItem.  # noqa: E501
        :rtype: float
        """
        return self._processing_fees

    @processing_fees.setter
    def processing_fees(self, processing_fees):
        """Sets the processing_fees of this PaymentLineItem.

        Applicable processing fees  # noqa: E501

        :param processing_fees: The processing_fees of this PaymentLineItem.  # noqa: E501
        :type processing_fees: float
        """

        self._processing_fees = processing_fees

    @property
    def description(self):
        """Gets the description of this PaymentLineItem.  # noqa: E501

        Description of the fee item  # noqa: E501

        :return: The description of this PaymentLineItem.  # noqa: E501
        :rtype: float
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PaymentLineItem.

        Description of the fee item  # noqa: E501

        :param description: The description of this PaymentLineItem.  # noqa: E501
        :type description: float
        """

        self._description = description

    @property
    def gst(self):
        """Gets the gst of this PaymentLineItem.  # noqa: E501

        Applicable gst of the fee item  # noqa: E501

        :return: The gst of this PaymentLineItem.  # noqa: E501
        :rtype: float
        """
        return self._gst

    @gst.setter
    def gst(self, gst):
        """Sets the gst of this PaymentLineItem.

        Applicable gst of the fee item  # noqa: E501

        :param gst: The gst of this PaymentLineItem.  # noqa: E501
        :type gst: float
        """

        self._gst = gst

    @property
    def pst(self):
        """Gets the pst of this PaymentLineItem.  # noqa: E501

        Applicable pst of the fee item  # noqa: E501

        :return: The pst of this PaymentLineItem.  # noqa: E501
        :rtype: float
        """
        return self._pst

    @pst.setter
    def pst(self, pst):
        """Sets the pst of this PaymentLineItem.

        Applicable pst of the fee item  # noqa: E501

        :param pst: The pst of this PaymentLineItem.  # noqa: E501
        :type pst: float
        """

        self._pst = pst

    @property
    def status_code(self):
        """Gets the status_code of this PaymentLineItem.  # noqa: E501

        Line item status  # noqa: E501

        :return: The status_code of this PaymentLineItem.  # noqa: E501
        :rtype: str
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this PaymentLineItem.

        Line item status  # noqa: E501

        :param status_code: The status_code of this PaymentLineItem.  # noqa: E501
        :type status_code: str
        """
        allowed_values = ["DRAFT", "IN_PROGRESS", "CREATED", "COMPLETED", "PARTIAL", "FAILED", "REFUNDED", "CANCELLED"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and status_code not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `status_code` ({0}), must be one of {1}"  # noqa: E501
                .format(status_code, allowed_values)
            )

        self._status_code = status_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentLineItem):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PaymentLineItem):
            return True

        return self.to_dict() != other.to_dict()
