# coding: utf-8

"""
    SBC Pay API Reference

    BC Registries Pay API reference documentation  # noqa: E501

    The version of the OpenAPI document: 1.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class Payment(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'links': 'list[Links]',
        'id': 'int',
        'created_by': 'str',
        'created_on': 'str',
        'invoices': 'list[Invoice]',
        'transactions': 'list[Transaction]',
        'payment_method': 'str',
        'payment_system': 'str',
        'status_code': 'str',
        'updated_by': 'str',
        'updated_on': 'str'
    }

    attribute_map = {
        'links': '_links',
        'id': 'id',
        'created_by': 'createdBy',
        'created_on': 'createdOn',
        'invoices': 'invoices',
        'transactions': 'transactions',
        'payment_method': 'paymentMethod',
        'payment_system': 'paymentSystem',
        'status_code': 'statusCode',
        'updated_by': 'updatedBy',
        'updated_on': 'updatedOn'
    }

    def __init__(self, links=None, id=None, created_by=None, created_on=None, invoices=None, transactions=None, payment_method=None, payment_system=None, status_code=None, updated_by=None, updated_on=None, local_vars_configuration=None):  # noqa: E501
        """Payment - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._links = None
        self._id = None
        self._created_by = None
        self._created_on = None
        self._invoices = None
        self._transactions = None
        self._payment_method = None
        self._payment_system = None
        self._status_code = None
        self._updated_by = None
        self._updated_on = None
        self.discriminator = None

        if links is not None:
            self.links = links
        if id is not None:
            self.id = id
        if created_by is not None:
            self.created_by = created_by
        if created_on is not None:
            self.created_on = created_on
        if invoices is not None:
            self.invoices = invoices
        if transactions is not None:
            self.transactions = transactions
        if payment_method is not None:
            self.payment_method = payment_method
        if payment_system is not None:
            self.payment_system = payment_system
        if status_code is not None:
            self.status_code = status_code
        if updated_by is not None:
            self.updated_by = updated_by
        if updated_on is not None:
            self.updated_on = updated_on

    @property
    def links(self):
        """Gets the links of this Payment.  # noqa: E501


        :return: The links of this Payment.  # noqa: E501
        :rtype: list[Links]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Payment.


        :param links: The links of this Payment.  # noqa: E501
        :type links: list[Links]
        """

        self._links = links

    @property
    def id(self):
        """Gets the id of this Payment.  # noqa: E501

        Unique identifier for payment  # noqa: E501

        :return: The id of this Payment.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Payment.

        Unique identifier for payment  # noqa: E501

        :param id: The id of this Payment.  # noqa: E501
        :type id: int
        """

        self._id = id

    @property
    def created_by(self):
        """Gets the created_by of this Payment.  # noqa: E501

        username of the account  # noqa: E501

        :return: The created_by of this Payment.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Payment.

        username of the account  # noqa: E501

        :param created_by: The created_by of this Payment.  # noqa: E501
        :type created_by: str
        """

        self._created_by = created_by

    @property
    def created_on(self):
        """Gets the created_on of this Payment.  # noqa: E501

        payment creation date  # noqa: E501

        :return: The created_on of this Payment.  # noqa: E501
        :rtype: str
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this Payment.

        payment creation date  # noqa: E501

        :param created_on: The created_on of this Payment.  # noqa: E501
        :type created_on: str
        """

        self._created_on = created_on

    @property
    def invoices(self):
        """Gets the invoices of this Payment.  # noqa: E501


        :return: The invoices of this Payment.  # noqa: E501
        :rtype: list[Invoice]
        """
        return self._invoices

    @invoices.setter
    def invoices(self, invoices):
        """Sets the invoices of this Payment.


        :param invoices: The invoices of this Payment.  # noqa: E501
        :type invoices: list[Invoice]
        """

        self._invoices = invoices

    @property
    def transactions(self):
        """Gets the transactions of this Payment.  # noqa: E501


        :return: The transactions of this Payment.  # noqa: E501
        :rtype: list[Transaction]
        """
        return self._transactions

    @transactions.setter
    def transactions(self, transactions):
        """Sets the transactions of this Payment.


        :param transactions: The transactions of this Payment.  # noqa: E501
        :type transactions: list[Transaction]
        """

        self._transactions = transactions

    @property
    def payment_method(self):
        """Gets the payment_method of this Payment.  # noqa: E501

        code of payment method  # noqa: E501

        :return: The payment_method of this Payment.  # noqa: E501
        :rtype: str
        """
        return self._payment_method

    @payment_method.setter
    def payment_method(self, payment_method):
        """Sets the payment_method of this Payment.

        code of payment method  # noqa: E501

        :param payment_method: The payment_method of this Payment.  # noqa: E501
        :type payment_method: str
        """

        self._payment_method = payment_method

    @property
    def payment_system(self):
        """Gets the payment_system of this Payment.  # noqa: E501

        payment system  # noqa: E501

        :return: The payment_system of this Payment.  # noqa: E501
        :rtype: str
        """
        return self._payment_system

    @payment_system.setter
    def payment_system(self, payment_system):
        """Sets the payment_system of this Payment.

        payment system  # noqa: E501

        :param payment_system: The payment_system of this Payment.  # noqa: E501
        :type payment_system: str
        """

        self._payment_system = payment_system

    @property
    def status_code(self):
        """Gets the status_code of this Payment.  # noqa: E501

        Status of payment.  # noqa: E501

        :return: The status_code of this Payment.  # noqa: E501
        :rtype: str
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this Payment.

        Status of payment.  # noqa: E501

        :param status_code: The status_code of this Payment.  # noqa: E501
        :type status_code: str
        """
        allowed_values = ["DRAFT", "IN_PROGRESS", "CREATED", "COMPLETED", "PARTIAL", "FAILED", "REFUNDED", "CANCELLED"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and status_code not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `status_code` ({0}), must be one of {1}"  # noqa: E501
                .format(status_code, allowed_values)
            )

        self._status_code = status_code

    @property
    def updated_by(self):
        """Gets the updated_by of this Payment.  # noqa: E501

        username of the account that made update  # noqa: E501

        :return: The updated_by of this Payment.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this Payment.

        username of the account that made update  # noqa: E501

        :param updated_by: The updated_by of this Payment.  # noqa: E501
        :type updated_by: str
        """

        self._updated_by = updated_by

    @property
    def updated_on(self):
        """Gets the updated_on of this Payment.  # noqa: E501

        payment update date  # noqa: E501

        :return: The updated_on of this Payment.  # noqa: E501
        :rtype: str
        """
        return self._updated_on

    @updated_on.setter
    def updated_on(self, updated_on):
        """Sets the updated_on of this Payment.

        payment update date  # noqa: E501

        :param updated_on: The updated_on of this Payment.  # noqa: E501
        :type updated_on: str
        """

        self._updated_on = updated_on

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Payment):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Payment):
            return True

        return self.to_dict() != other.to_dict()
