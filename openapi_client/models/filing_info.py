# coding: utf-8

"""
    SBC Pay API Reference

    BC Registries Pay API reference documentation  # noqa: E501

    The version of the OpenAPI document: 1.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class FilingInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'corp_type': 'str',
        'date': 'str',
        'filing_types': 'list[FilingType]'
    }

    attribute_map = {
        'corp_type': 'corpType',
        'date': 'date',
        'filing_types': 'filingTypes'
    }

    def __init__(self, corp_type=None, date=None, filing_types=None, local_vars_configuration=None):  # noqa: E501
        """FilingInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._corp_type = None
        self._date = None
        self._filing_types = None
        self.discriminator = None

        if corp_type is not None:
            self.corp_type = corp_type
        if date is not None:
            self.date = date
        if filing_types is not None:
            self.filing_types = filing_types

    @property
    def corp_type(self):
        """Gets the corp_type of this FilingInfo.  # noqa: E501

        Corp Type  # noqa: E501

        :return: The corp_type of this FilingInfo.  # noqa: E501
        :rtype: str
        """
        return self._corp_type

    @corp_type.setter
    def corp_type(self, corp_type):
        """Sets the corp_type of this FilingInfo.

        Corp Type  # noqa: E501

        :param corp_type: The corp_type of this FilingInfo.  # noqa: E501
        :type corp_type: str
        """

        self._corp_type = corp_type

    @property
    def date(self):
        """Gets the date of this FilingInfo.  # noqa: E501

        Date on which the filing rates are applicable  # noqa: E501

        :return: The date of this FilingInfo.  # noqa: E501
        :rtype: str
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this FilingInfo.

        Date on which the filing rates are applicable  # noqa: E501

        :param date: The date of this FilingInfo.  # noqa: E501
        :type date: str
        """

        self._date = date

    @property
    def filing_types(self):
        """Gets the filing_types of this FilingInfo.  # noqa: E501


        :return: The filing_types of this FilingInfo.  # noqa: E501
        :rtype: list[FilingType]
        """
        return self._filing_types

    @filing_types.setter
    def filing_types(self, filing_types):
        """Sets the filing_types of this FilingInfo.


        :param filing_types: The filing_types of this FilingInfo.  # noqa: E501
        :type filing_types: list[FilingType]
        """

        self._filing_types = filing_types

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FilingInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FilingInfo):
            return True

        return self.to_dict() != other.to_dict()
