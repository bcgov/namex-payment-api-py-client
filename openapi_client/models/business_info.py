# coding: utf-8

"""
    SBC Pay API Reference

    BC Registries Pay API reference documentation  # noqa: E501

    The version of the OpenAPI document: 1.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class BusinessInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'business_identifier': 'str',
        'business_name': 'str',
        'contact_info': 'list[ContactInfo]'
    }

    attribute_map = {
        'business_identifier': 'businessIdentifier',
        'business_name': 'businessName',
        'contact_info': 'contactInfo'
    }

    def __init__(self, business_identifier=None, business_name=None, contact_info=None, local_vars_configuration=None):  # noqa: E501
        """BusinessInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._business_identifier = None
        self._business_name = None
        self._contact_info = None
        self.discriminator = None

        if business_identifier is not None:
            self.business_identifier = business_identifier
        if business_name is not None:
            self.business_name = business_name
        if contact_info is not None:
            self.contact_info = contact_info

    @property
    def business_identifier(self):
        """Gets the business_identifier of this BusinessInfo.  # noqa: E501

        Business identifier  # noqa: E501

        :return: The business_identifier of this BusinessInfo.  # noqa: E501
        :rtype: str
        """
        return self._business_identifier

    @business_identifier.setter
    def business_identifier(self, business_identifier):
        """Sets the business_identifier of this BusinessInfo.

        Business identifier  # noqa: E501

        :param business_identifier: The business_identifier of this BusinessInfo.  # noqa: E501
        :type business_identifier: str
        """

        self._business_identifier = business_identifier

    @property
    def business_name(self):
        """Gets the business_name of this BusinessInfo.  # noqa: E501

        Legal entity name  # noqa: E501

        :return: The business_name of this BusinessInfo.  # noqa: E501
        :rtype: str
        """
        return self._business_name

    @business_name.setter
    def business_name(self, business_name):
        """Sets the business_name of this BusinessInfo.

        Legal entity name  # noqa: E501

        :param business_name: The business_name of this BusinessInfo.  # noqa: E501
        :type business_name: str
        """

        self._business_name = business_name

    @property
    def contact_info(self):
        """Gets the contact_info of this BusinessInfo.  # noqa: E501


        :return: The contact_info of this BusinessInfo.  # noqa: E501
        :rtype: list[ContactInfo]
        """
        return self._contact_info

    @contact_info.setter
    def contact_info(self, contact_info):
        """Sets the contact_info of this BusinessInfo.


        :param contact_info: The contact_info of this BusinessInfo.  # noqa: E501
        :type contact_info: list[ContactInfo]
        """

        self._contact_info = contact_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BusinessInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BusinessInfo):
            return True

        return self.to_dict() != other.to_dict()
