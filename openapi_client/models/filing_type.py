# coding: utf-8

"""
    SBC Pay API Reference

    BC Registries Pay API reference documentation  # noqa: E501

    The version of the OpenAPI document: 1.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class FilingType(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'filing_type_code': 'str',
        'priority': 'bool',
        'filing_description': 'str'
    }

    attribute_map = {
        'filing_type_code': 'filingTypeCode',
        'priority': 'priority',
        'filing_description': 'filingDescription'
    }

    def __init__(self, filing_type_code=None, priority=None, filing_description=None, local_vars_configuration=None):  # noqa: E501
        """FilingType - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._filing_type_code = None
        self._priority = None
        self._filing_description = None
        self.discriminator = None

        if filing_type_code is not None:
            self.filing_type_code = filing_type_code
        if priority is not None:
            self.priority = priority
        if filing_description is not None:
            self.filing_description = filing_description

    @property
    def filing_type_code(self):
        """Gets the filing_type_code of this FilingType.  # noqa: E501

        Filing Type Code  # noqa: E501

        :return: The filing_type_code of this FilingType.  # noqa: E501
        :rtype: str
        """
        return self._filing_type_code

    @filing_type_code.setter
    def filing_type_code(self, filing_type_code):
        """Sets the filing_type_code of this FilingType.

        Filing Type Code  # noqa: E501

        :param filing_type_code: The filing_type_code of this FilingType.  # noqa: E501
        :type filing_type_code: str
        """

        self._filing_type_code = filing_type_code

    @property
    def priority(self):
        """Gets the priority of this FilingType.  # noqa: E501

        Priority Indicator  # noqa: E501

        :return: The priority of this FilingType.  # noqa: E501
        :rtype: bool
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this FilingType.

        Priority Indicator  # noqa: E501

        :param priority: The priority of this FilingType.  # noqa: E501
        :type priority: bool
        """

        self._priority = priority

    @property
    def filing_description(self):
        """Gets the filing_description of this FilingType.  # noqa: E501

        Filing Type Description  # noqa: E501

        :return: The filing_description of this FilingType.  # noqa: E501
        :rtype: str
        """
        return self._filing_description

    @filing_description.setter
    def filing_description(self, filing_description):
        """Sets the filing_description of this FilingType.

        Filing Type Description  # noqa: E501

        :param filing_description: The filing_description of this FilingType.  # noqa: E501
        :type filing_description: str
        """

        self._filing_description = filing_description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FilingType):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FilingType):
            return True

        return self.to_dict() != other.to_dict()
