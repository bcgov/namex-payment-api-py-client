# coding: utf-8

"""
    SBC Pay API Reference

    BC Registries Pay API reference documentation  # noqa: E501

    The version of the OpenAPI document: 1.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class Transaction(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'links': 'list[Links]',
        'id': 'str',
        'client_system_url': 'str',
        'start_time': 'str',
        'end_time': 'str',
        'pay_system_url': 'str',
        'payment_id': 'int',
        'status_code': 'str'
    }

    attribute_map = {
        'links': '_links',
        'id': 'id',
        'client_system_url': 'clientSystemUrl',
        'start_time': 'startTime',
        'end_time': 'endTime',
        'pay_system_url': 'paySystemUrl',
        'payment_id': 'paymentId',
        'status_code': 'statusCode'
    }

    def __init__(self, links=None, id=None, client_system_url=None, start_time=None, end_time=None, pay_system_url=None, payment_id=None, status_code=None, local_vars_configuration=None):  # noqa: E501
        """Transaction - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._links = None
        self._id = None
        self._client_system_url = None
        self._start_time = None
        self._end_time = None
        self._pay_system_url = None
        self._payment_id = None
        self._status_code = None
        self.discriminator = None

        if links is not None:
            self.links = links
        if id is not None:
            self.id = id
        if client_system_url is not None:
            self.client_system_url = client_system_url
        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time
        if pay_system_url is not None:
            self.pay_system_url = pay_system_url
        if payment_id is not None:
            self.payment_id = payment_id
        if status_code is not None:
            self.status_code = status_code

    @property
    def links(self):
        """Gets the links of this Transaction.  # noqa: E501


        :return: The links of this Transaction.  # noqa: E501
        :rtype: list[Links]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Transaction.


        :param links: The links of this Transaction.  # noqa: E501
        :type links: list[Links]
        """

        self._links = links

    @property
    def id(self):
        """Gets the id of this Transaction.  # noqa: E501

        Unique identifier for transaction  # noqa: E501

        :return: The id of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Transaction.

        Unique identifier for transaction  # noqa: E501

        :param id: The id of this Transaction.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def client_system_url(self):
        """Gets the client_system_url of this Transaction.  # noqa: E501

        Client system url  # noqa: E501

        :return: The client_system_url of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._client_system_url

    @client_system_url.setter
    def client_system_url(self, client_system_url):
        """Sets the client_system_url of this Transaction.

        Client system url  # noqa: E501

        :param client_system_url: The client_system_url of this Transaction.  # noqa: E501
        :type client_system_url: str
        """

        self._client_system_url = client_system_url

    @property
    def start_time(self):
        """Gets the start_time of this Transaction.  # noqa: E501

        transaction start time  # noqa: E501

        :return: The start_time of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this Transaction.

        transaction start time  # noqa: E501

        :param start_time: The start_time of this Transaction.  # noqa: E501
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this Transaction.  # noqa: E501

        transaction end time  # noqa: E501

        :return: The end_time of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this Transaction.

        transaction end time  # noqa: E501

        :param end_time: The end_time of this Transaction.  # noqa: E501
        :type end_time: str
        """

        self._end_time = end_time

    @property
    def pay_system_url(self):
        """Gets the pay_system_url of this Transaction.  # noqa: E501

        Payment system url  # noqa: E501

        :return: The pay_system_url of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._pay_system_url

    @pay_system_url.setter
    def pay_system_url(self, pay_system_url):
        """Sets the pay_system_url of this Transaction.

        Payment system url  # noqa: E501

        :param pay_system_url: The pay_system_url of this Transaction.  # noqa: E501
        :type pay_system_url: str
        """

        self._pay_system_url = pay_system_url

    @property
    def payment_id(self):
        """Gets the payment_id of this Transaction.  # noqa: E501

        id of the payment  # noqa: E501

        :return: The payment_id of this Transaction.  # noqa: E501
        :rtype: int
        """
        return self._payment_id

    @payment_id.setter
    def payment_id(self, payment_id):
        """Sets the payment_id of this Transaction.

        id of the payment  # noqa: E501

        :param payment_id: The payment_id of this Transaction.  # noqa: E501
        :type payment_id: int
        """

        self._payment_id = payment_id

    @property
    def status_code(self):
        """Gets the status_code of this Transaction.  # noqa: E501

        Status of payment.  # noqa: E501

        :return: The status_code of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this Transaction.

        Status of payment.  # noqa: E501

        :param status_code: The status_code of this Transaction.  # noqa: E501
        :type status_code: str
        """
        allowed_values = ["DRAFT", "IN_PROGRESS", "CREATED", "COMPLETED", "PARTIAL", "FAILED", "REFUNDED", "CANCELLED"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and status_code not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `status_code` ({0}), must be one of {1}"  # noqa: E501
                .format(status_code, allowed_values)
            )

        self._status_code = status_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Transaction):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Transaction):
            return True

        return self.to_dict() != other.to_dict()
