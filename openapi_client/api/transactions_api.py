# coding: utf-8

"""
    SBC Pay API Reference

    BC Registries Pay API reference documentation  # noqa: E501

    The version of the OpenAPI document: 1.0.1
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openapi_client.api_client import ApiClient
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class TransactionsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_transaction(self, payment_identifier, redirect_uri, **kwargs):  # noqa: E501
        """Create a transaction  # noqa: E501

        Creates a transaction for the payment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_transaction(payment_identifier, redirect_uri, async_req=True)
        >>> result = thread.get()

        :param payment_identifier: (required)
        :type payment_identifier: str
        :param redirect_uri: Redirect URI (required)
        :type redirect_uri: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Transaction
        """
        kwargs['_return_http_data_only'] = True
        return self.create_transaction_with_http_info(payment_identifier, redirect_uri, **kwargs)  # noqa: E501

    def create_transaction_with_http_info(self, payment_identifier, redirect_uri, **kwargs):  # noqa: E501
        """Create a transaction  # noqa: E501

        Creates a transaction for the payment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_transaction_with_http_info(payment_identifier, redirect_uri, async_req=True)
        >>> result = thread.get()

        :param payment_identifier: (required)
        :type payment_identifier: str
        :param redirect_uri: Redirect URI (required)
        :type redirect_uri: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Transaction, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'payment_identifier',
            'redirect_uri'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_transaction" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'payment_identifier' is set
        if self.api_client.client_side_validation and ('payment_identifier' not in local_var_params or  # noqa: E501
                                                        local_var_params['payment_identifier'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `payment_identifier` when calling `create_transaction`")  # noqa: E501
        # verify the required parameter 'redirect_uri' is set
        if self.api_client.client_side_validation and ('redirect_uri' not in local_var_params or  # noqa: E501
                                                        local_var_params['redirect_uri'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `redirect_uri` when calling `create_transaction`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'payment_identifier' in local_var_params:
            path_params['payment_identifier'] = local_var_params['payment_identifier']  # noqa: E501

        query_params = []
        if 'redirect_uri' in local_var_params and local_var_params['redirect_uri'] is not None:  # noqa: E501
            query_params.append(('redirect_uri', local_var_params['redirect_uri']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/payment-requests/{payment_identifier}/transactions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Transaction',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_transaction(self, receipt_number, payment_identifier, transaction_identifier, **kwargs):  # noqa: E501
        """Get Transaction  # noqa: E501

        Get a Transaction for the payment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_transaction(receipt_number, payment_identifier, transaction_identifier, async_req=True)
        >>> result = thread.get()

        :param receipt_number: Receipt Number for the payment (required)
        :type receipt_number: str
        :param payment_identifier: Unique Identifier for the payment (required)
        :type payment_identifier: str
        :param transaction_identifier: Unique Identifier for the transaction (required)
        :type transaction_identifier: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Transactions
        """
        kwargs['_return_http_data_only'] = True
        return self.get_transaction_with_http_info(receipt_number, payment_identifier, transaction_identifier, **kwargs)  # noqa: E501

    def get_transaction_with_http_info(self, receipt_number, payment_identifier, transaction_identifier, **kwargs):  # noqa: E501
        """Get Transaction  # noqa: E501

        Get a Transaction for the payment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_transaction_with_http_info(receipt_number, payment_identifier, transaction_identifier, async_req=True)
        >>> result = thread.get()

        :param receipt_number: Receipt Number for the payment (required)
        :type receipt_number: str
        :param payment_identifier: Unique Identifier for the payment (required)
        :type payment_identifier: str
        :param transaction_identifier: Unique Identifier for the transaction (required)
        :type transaction_identifier: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Transactions, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'receipt_number',
            'payment_identifier',
            'transaction_identifier'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_transaction" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'receipt_number' is set
        if self.api_client.client_side_validation and ('receipt_number' not in local_var_params or  # noqa: E501
                                                        local_var_params['receipt_number'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `receipt_number` when calling `get_transaction`")  # noqa: E501
        # verify the required parameter 'payment_identifier' is set
        if self.api_client.client_side_validation and ('payment_identifier' not in local_var_params or  # noqa: E501
                                                        local_var_params['payment_identifier'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `payment_identifier` when calling `get_transaction`")  # noqa: E501
        # verify the required parameter 'transaction_identifier' is set
        if self.api_client.client_side_validation and ('transaction_identifier' not in local_var_params or  # noqa: E501
                                                        local_var_params['transaction_identifier'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `transaction_identifier` when calling `get_transaction`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'payment_identifier' in local_var_params:
            path_params['payment_identifier'] = local_var_params['payment_identifier']  # noqa: E501
        if 'transaction_identifier' in local_var_params:
            path_params['transaction_identifier'] = local_var_params['transaction_identifier']  # noqa: E501

        query_params = []
        if 'receipt_number' in local_var_params and local_var_params['receipt_number'] is not None:  # noqa: E501
            query_params.append(('receipt_number', local_var_params['receipt_number']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/payment-requests/{payment_identifier}/transactions/{transaction_identifier}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Transactions',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_transactions(self, payment_identifier, **kwargs):  # noqa: E501
        """Get Transactions  # noqa: E501

        Get Transactions for the payment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_transactions(payment_identifier, async_req=True)
        >>> result = thread.get()

        :param payment_identifier: Unique Identifier for the payment (required)
        :type payment_identifier: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Transactions
        """
        kwargs['_return_http_data_only'] = True
        return self.get_transactions_with_http_info(payment_identifier, **kwargs)  # noqa: E501

    def get_transactions_with_http_info(self, payment_identifier, **kwargs):  # noqa: E501
        """Get Transactions  # noqa: E501

        Get Transactions for the payment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_transactions_with_http_info(payment_identifier, async_req=True)
        >>> result = thread.get()

        :param payment_identifier: Unique Identifier for the payment (required)
        :type payment_identifier: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Transactions, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'payment_identifier'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_transactions" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'payment_identifier' is set
        if self.api_client.client_side_validation and ('payment_identifier' not in local_var_params or  # noqa: E501
                                                        local_var_params['payment_identifier'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `payment_identifier` when calling `get_transactions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'payment_identifier' in local_var_params:
            path_params['payment_identifier'] = local_var_params['payment_identifier']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/payment-requests/{payment_identifier}/transactions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Transactions',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_transaction(self, payment_identifier, receipt_number, transaction_identifier, **kwargs):  # noqa: E501
        """Update a transaction  # noqa: E501

        Updaate transaction for the payment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_transaction(payment_identifier, receipt_number, transaction_identifier, async_req=True)
        >>> result = thread.get()

        :param payment_identifier: Unique Identifier for the payment (required)
        :type payment_identifier: str
        :param receipt_number: Receipt Number for the payment (required)
        :type receipt_number: str
        :param transaction_identifier: Unique Identifier for the transaction (required)
        :type transaction_identifier: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Transaction
        """
        kwargs['_return_http_data_only'] = True
        return self.update_transaction_with_http_info(payment_identifier, receipt_number, transaction_identifier, **kwargs)  # noqa: E501

    def update_transaction_with_http_info(self, payment_identifier, receipt_number, transaction_identifier, **kwargs):  # noqa: E501
        """Update a transaction  # noqa: E501

        Updaate transaction for the payment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_transaction_with_http_info(payment_identifier, receipt_number, transaction_identifier, async_req=True)
        >>> result = thread.get()

        :param payment_identifier: Unique Identifier for the payment (required)
        :type payment_identifier: str
        :param receipt_number: Receipt Number for the payment (required)
        :type receipt_number: str
        :param transaction_identifier: Unique Identifier for the transaction (required)
        :type transaction_identifier: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Transaction, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'payment_identifier',
            'receipt_number',
            'transaction_identifier'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_transaction" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'payment_identifier' is set
        if self.api_client.client_side_validation and ('payment_identifier' not in local_var_params or  # noqa: E501
                                                        local_var_params['payment_identifier'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `payment_identifier` when calling `update_transaction`")  # noqa: E501
        # verify the required parameter 'receipt_number' is set
        if self.api_client.client_side_validation and ('receipt_number' not in local_var_params or  # noqa: E501
                                                        local_var_params['receipt_number'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `receipt_number` when calling `update_transaction`")  # noqa: E501
        # verify the required parameter 'transaction_identifier' is set
        if self.api_client.client_side_validation and ('transaction_identifier' not in local_var_params or  # noqa: E501
                                                        local_var_params['transaction_identifier'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `transaction_identifier` when calling `update_transaction`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'payment_identifier' in local_var_params:
            path_params['payment_identifier'] = local_var_params['payment_identifier']  # noqa: E501
        if 'transaction_identifier' in local_var_params:
            path_params['transaction_identifier'] = local_var_params['transaction_identifier']  # noqa: E501

        query_params = []
        if 'receipt_number' in local_var_params and local_var_params['receipt_number'] is not None:  # noqa: E501
            query_params.append(('receipt_number', local_var_params['receipt_number']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/payment-requests/{payment_identifier}/transactions/{transaction_identifier}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Transaction',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
